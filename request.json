{
  _readableState: ReadableState{
    objectMode: false,
    highWaterMark: 16384,
    buffer: [

    ],
    length: 0,
    pipes: null,
    pipesCount: 0,
    flowing: null,
    ended: false,
    endEmitted: false,
    reading: false,
    sync: true,
    needReadable: false,
    emittedReadable: false,
    readableListening: false,
    defaultEncoding: 'utf8',
    ranOut: false,
    awaitDrain: 0,
    readingMore: false,
    decoder: null,
    encoding: null
  },
  readable: true,
  domain: null,
  _events: {

  },
  _eventsCount: 0,
  _maxListeners: undefined,
  socket: Socket{
    _connecting: false,
    _hadError: false,
    _handle: TCP{
      _externalStream: {

      },
      fd: 13,
      reading: true,
      owner: [
        Circular
      ],
      onread: [
        Function: onread
      ],
      onconnection: null,
      writeQueueSize: 0
    },
    _parent: null,
    _host: null,
    _readableState: ReadableState{
      objectMode: false,
      highWaterMark: 16384,
      buffer: [

      ],
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      defaultEncoding: 'utf8',
      ranOut: false,
      awaitDrain: 0,
      readingMore: false,
      decoder: null,
      encoding: null,
      resumeScheduled: false
    },
    readable: true,
    domain: null,
    _events: {
      end: [
        Object
      ],
      finish: [
        Function: onSocketFinish
      ],
      _socketEnd: [
        Function: onSocketEnd
      ],
      drain: [
        Object
      ],
      timeout: [
        Function
      ],
      error: [
        Function: socketOnError
      ],
      close: [
        Object
      ],
      data: [
        Function: socketOnData
      ],
      resume: [
        Function: onSocketResume
      ],
      pause: [
        Function: onSocketPause
      ]
    },
    _eventsCount: 10,
    _maxListeners: undefined,
    _writableState: WritableState{
      objectMode: false,
      highWaterMark: 16384,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: true,
      bufferProcessing: false,
      onwrite: [
        Function
      ],
      writecb: null,
      writelen: 0,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false
    },
    writable: true,
    allowHalfOpen: true,
    destroyed: false,
    bytesRead: 0,
    _bytesDispatched: 0,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server{
      domain: null,
      _events: [
        Object
      ],
      _eventsCount: 3,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [
        Object
      ],
      _usingSlaves: false,
      _slaves: [

      ],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      _pendingResponseData: 0,
      _connectionKey: '6::::8001'
    },
    _idleTimeout: 120000,
    _idleNext: {
      _idleNext: [
        Object
      ],
      _idlePrev: [
        Circular
      ]
    },
    _idlePrev: {
      [
        Function: utcDate
      ]_onTimeout: [
        Function
      ],
      _idleTimeout: 943,
      _idleNext: [
        Circular
      ],
      _idlePrev: [
        Object
      ],
      _idleStart: 4842
    },
    _idleStart: 4834,
    parser: HTTPParser{
      '0': [
        Function: parserOnHeaders
      ],
      '1': [
        Function: parserOnHeadersComplete
      ],
      '2': [
        Function: parserOnBody
      ],
      '3': [
        Function: parserOnMessageComplete
      ],
      '4': [
        Function: onParserExecute
      ],
      _headers: [

      ],
      _url: '',
      _consumed: true,
      socket: [
        Circular
      ],
      incoming: [
        Circular
      ],
      maxHeaderPairs: 2000,
      onIncoming: [
        Function: parserOnIncoming
      ]
    },
    on: [
      Function: socketOnWrap
    ],
    _paused: false,
    read: [
      Function
    ],
    _consuming: true,
    _httpMessage: ServerResponse{
      domain: null,
      _events: [
        Object
      ],
      _eventsCount: 1,
      _maxListeners: undefined,
      output: [

      ],
      outputEncodings: [

      ],
      outputCallbacks: [

      ],
      outputSize: 0,
      writable: true,
      _last: false,
      chunkedEncoding: true,
      shouldKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: true,
      _removedHeader: {

      },
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: false,
      _headerSent: false,
      socket: [
        Circular
      ],
      connection: [
        Circular
      ],
      _header: 'HTTP/1.1 200 OK\r\nContent-Type: application/json\r\nDate: Mon, 24 Oct 2016 13:51:21 GMT\r\nConnection: keep-alive\r\nTransfer-Encoding: chunked\r\n\r\n',
      _headers: null,
      _headerNames: {

      },
      _onPendingData: [
        Function: updateOutgoingData
      ],
      statusMessage: 'OK',
      statusCode: 200
    }
  },
  connection: Socket{
    _connecting: false,
    _hadError: false,
    _handle: TCP{
      _externalStream: {

      },
      fd: 13,
      reading: true,
      owner: [
        Circular
      ],
      onread: [
        Function: onread
      ],
      onconnection: null,
      writeQueueSize: 0
    },
    _parent: null,
    _host: null,
    _readableState: ReadableState{
      objectMode: false,
      highWaterMark: 16384,
      buffer: [

      ],
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      defaultEncoding: 'utf8',
      ranOut: false,
      awaitDrain: 0,
      readingMore: false,
      decoder: null,
      encoding: null,
      resumeScheduled: false
    },
    readable: true,
    domain: null,
    _events: {
      end: [
        Object
      ],
      finish: [
        Function: onSocketFinish
      ],
      _socketEnd: [
        Function: onSocketEnd
      ],
      drain: [
        Object
      ],
      timeout: [
        Function
      ],
      error: [
        Function: socketOnError
      ],
      close: [
        Object
      ],
      data: [
        Function: socketOnData
      ],
      resume: [
        Function: onSocketResume
      ],
      pause: [
        Function: onSocketPause
      ]
    },
    _eventsCount: 10,
    _maxListeners: undefined,
    _writableState: WritableState{
      objectMode: false,
      highWaterMark: 16384,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: true,
      bufferProcessing: false,
      onwrite: [
        Function
      ],
      writecb: null,
      writelen: 0,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false
    },
    writable: true,
    allowHalfOpen: true,
    destroyed: false,
    bytesRead: 0,
    _bytesDispatched: 0,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server{
      domain: null,
      _events: [
        Object
      ],
      _eventsCount: 3,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [
        Object
      ],
      _usingSlaves: false,
      _slaves: [

      ],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      _pendingResponseData: 0,
      _connectionKey: '6::::8001'
    },
    _idleTimeout: 120000,
    _idleNext: {
      _idleNext: [
        Object
      ],
      _idlePrev: [
        Circular
      ]
    },
    _idlePrev: {
      [
        Function: utcDate
      ]_onTimeout: [
        Function
      ],
      _idleTimeout: 943,
      _idleNext: [
        Circular
      ],
      _idlePrev: [
        Object
      ],
      _idleStart: 4842
    },
    _idleStart: 4834,
    parser: HTTPParser{
      '0': [
        Function: parserOnHeaders
      ],
      '1': [
        Function: parserOnHeadersComplete
      ],
      '2': [
        Function: parserOnBody
      ],
      '3': [
        Function: parserOnMessageComplete
      ],
      '4': [
        Function: onParserExecute
      ],
      _headers: [

      ],
      _url: '',
      _consumed: true,
      socket: [
        Circular
      ],
      incoming: [
        Circular
      ],
      maxHeaderPairs: 2000,
      onIncoming: [
        Function: parserOnIncoming
      ]
    },
    on: [
      Function: socketOnWrap
    ],
    _paused: false,
    read: [
      Function
    ],
    _consuming: true,
    _httpMessage: ServerResponse{
      domain: null,
      _events: [
        Object
      ],
      _eventsCount: 1,
      _maxListeners: undefined,
      output: [

      ],
      outputEncodings: [

      ],
      outputCallbacks: [

      ],
      outputSize: 0,
      writable: true,
      _last: false,
      chunkedEncoding: true,
      shouldKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: true,
      _removedHeader: {

      },
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: false,
      _headerSent: false,
      socket: [
        Circular
      ],
      connection: [
        Circular
      ],
      _header: 'HTTP/1.1 200 OK\r\nContent-Type: application/json\r\nDate: Mon, 24 Oct 2016 13:51:21 GMT\r\nConnection: keep-alive\r\nTransfer-Encoding: chunked\r\n\r\n',
      _headers: null,
      _headerNames: {

      },
      _onPendingData: [
        Function: updateOutgoingData
      ],
      statusMessage: 'OK',
      statusCode: 200
    }
  },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: false,
  headers: {
    host: '127.0.0.1:8001',
    connection: 'keep-alive',
    'cache-control': 'max-age=0',
    'upgrade-insecure-requests': '1',
    'user-agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36',
    accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
    'accept-encoding': 'gzip, deflate, sdch',
    'accept-language': 'sv-SE,sv;q=0.8,en-US;q=0.6,en;q=0.4'
  },
  rawHeaders: [
    'Host',
    '127.0.0.1:8001',
    'Connection',
    'keep-alive',
    'Cache-Control',
    'max-age=0',
    'Upgrade-Insecure-Requests',
    '1',
    'User-Agent',
    'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36',
    'Accept',
    'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
    'Accept-Encoding',
    'gzip, deflate, sdch',
    'Accept-Language',
    'sv-SE,sv;q=0.8,en-US;q=0.6,en;q=0.4'
  ],
  trailers: {

  },
  rawTrailers: [
    
  ],
  upgrade: false,
  url: '/',
  method: 'GET',
  statusCode: null,
  statusMessage: null,
  client: Socket{
    _connecting: false,
    _hadError: false,
    _handle: TCP{
      _externalStream: {

      },
      fd: 13,
      reading: true,
      owner: [
        Circular
      ],
      onread: [
        Function: onread
      ],
      onconnection: null,
      writeQueueSize: 0
    },
    _parent: null,
    _host: null,
    _readableState: ReadableState{
      objectMode: false,
      highWaterMark: 16384,
      buffer: [

      ],
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      defaultEncoding: 'utf8',
      ranOut: false,
      awaitDrain: 0,
      readingMore: false,
      decoder: null,
      encoding: null,
      resumeScheduled: false
    },
    readable: true,
    domain: null,
    _events: {
      end: [
        Object
      ],
      finish: [
        Function: onSocketFinish
      ],
      _socketEnd: [
        Function: onSocketEnd
      ],
      drain: [
        Object
      ],
      timeout: [
        Function
      ],
      error: [
        Function: socketOnError
      ],
      close: [
        Object
      ],
      data: [
        Function: socketOnData
      ],
      resume: [
        Function: onSocketResume
      ],
      pause: [
        Function: onSocketPause
      ]
    },
    _eventsCount: 10,
    _maxListeners: undefined,
    _writableState: WritableState{
      objectMode: false,
      highWaterMark: 16384,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: true,
      bufferProcessing: false,
      onwrite: [
        Function
      ],
      writecb: null,
      writelen: 0,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false
    },
    writable: true,
    allowHalfOpen: true,
    destroyed: false,
    bytesRead: 0,
    _bytesDispatched: 0,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server{
      domain: null,
      _events: [
        Object
      ],
      _eventsCount: 3,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [
        Object
      ],
      _usingSlaves: false,
      _slaves: [

      ],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      _pendingResponseData: 0,
      _connectionKey: '6::::8001'
    },
    _idleTimeout: 120000,
    _idleNext: {
      _idleNext: [
        Object
      ],
      _idlePrev: [
        Circular
      ]
    },
    _idlePrev: {
      [
        Function: utcDate
      ]_onTimeout: [
        Function
      ],
      _idleTimeout: 943,
      _idleNext: [
        Circular
      ],
      _idlePrev: [
        Object
      ],
      _idleStart: 4842
    },
    _idleStart: 4834,
    parser: HTTPParser{
      '0': [
        Function: parserOnHeaders
      ],
      '1': [
        Function: parserOnHeadersComplete
      ],
      '2': [
        Function: parserOnBody
      ],
      '3': [
        Function: parserOnMessageComplete
      ],
      '4': [
        Function: onParserExecute
      ],
      _headers: [

      ],
      _url: '',
      _consumed: true,
      socket: [
        Circular
      ],
      incoming: [
        Circular
      ],
      maxHeaderPairs: 2000,
      onIncoming: [
        Function: parserOnIncoming
      ]
    },
    on: [
      Function: socketOnWrap
    ],
    _paused: false,
    read: [
      Function
    ],
    _consuming: true,
    _httpMessage: ServerResponse{
      domain: null,
      _events: [
        Object
      ],
      _eventsCount: 1,
      _maxListeners: undefined,
      output: [

      ],
      outputEncodings: [

      ],
      outputCallbacks: [

      ],
      outputSize: 0,
      writable: true,
      _last: false,
      chunkedEncoding: true,
      shouldKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: true,
      _removedHeader: {

      },
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: false,
      _headerSent: false,
      socket: [
        Circular
      ],
      connection: [
        Circular
      ],
      _header: 'HTTP/1.1 200 OK\r\nContent-Type: application/json\r\nDate: Mon, 24 Oct 2016 13:51:21 GMT\r\nConnection: keep-alive\r\nTransfer-Encoding: chunked\r\n\r\n',
      _headers: null,
      _headerNames: {

      },
      _onPendingData: [
        Function: updateOutgoingData
      ],
      statusMessage: 'OK',
      statusCode: 200
    }
  },
  _consuming: false,
  _dumped: false
}
